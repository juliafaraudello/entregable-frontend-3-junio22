{"ast":null,"code":"import _slicedToArray from\"/Users/juliafaraudello/Desktop/EntregableFrontIII/entregable-frontend-3-junio22/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";// El componente Item no tiene componentes hijos.\n// ESTADO: Item debe tener un número para almacenar la cantidad de stock, la misma se la defina el padre a la hora de crearlo.\n// MÉTODOS: Item debe manejar el click de su boton para restar la cantidad en stock de sí mismo y a su vez poder aumentar el estado de su \"abuelo\" App.\n// PROPS: Item recibe todos los campos que muestra en pantalla: nombre, descripcion, stock y el métodos heredados para su uso.\n// Maqueta de Item:\n//    h3\n//    p\n//    h5 > span    (este span debe mostrar la cantidad si es mayor a 0 \"agotado\" si llega a 0)\n//    button       (este boton debe permitir comprar, pero si la cantidad es menor a 0 debe estar deshabilitado y decir \"Sin stock\")\nimport{userState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Item(props){var _userState=userState(props.stock),_userState2=_slicedToArray(_userState,2),itemStock=_userState2[0],setItemStock=_userState2[1];var stock=itemStock>0;return/*#__PURE__*/_jsxs(\"div\",{className:\"producto\",children:[/*#__PURE__*/_jsx(\"h3\",{children:props.nombre}),/*#__PURE__*/_jsx(\"p\",{children:props.descripcion}),/*#__PURE__*/_jsxs(\"h5\",{children:[\"En stock:\",/*#__PURE__*/_jsx(\"span\",{children:stock?itemStock:'Agotado'})]}),/*#__PURE__*/_jsx(\"button\",{disabled:!stock,onClick:function onClick(){setItemStock(itemStock-1);props.addItem();},children:stock?'Comprar':'No hay mas stock'})]});}","map":{"version":3,"names":["userState","Item","props","stock","itemStock","setItemStock","nombre","descripcion","addItem"],"sources":["/Users/juliafaraudello/Desktop/EntregableFrontIII/entregable-frontend-3-junio22/src/components/Item.js"],"sourcesContent":["\r\n// El componente Item no tiene componentes hijos.\r\n// ESTADO: Item debe tener un número para almacenar la cantidad de stock, la misma se la defina el padre a la hora de crearlo.\r\n// MÉTODOS: Item debe manejar el click de su boton para restar la cantidad en stock de sí mismo y a su vez poder aumentar el estado de su \"abuelo\" App.\r\n// PROPS: Item recibe todos los campos que muestra en pantalla: nombre, descripcion, stock y el métodos heredados para su uso.\r\n// Maqueta de Item:\r\n//    h3\r\n//    p\r\n//    h5 > span    (este span debe mostrar la cantidad si es mayor a 0 \"agotado\" si llega a 0)\r\n//    button       (este boton debe permitir comprar, pero si la cantidad es menor a 0 debe estar deshabilitado y decir \"Sin stock\")\r\n\r\nimport {userState} from \"react\";\r\nexport default function Item(props) {\r\n\r\n  const [itemStock,setItemStock] = userState(props.stock);\r\n  const stock = itemStock >0\r\n  \r\n  return (\r\n    <div className='producto'>\r\n      <h3>{props.nombre}</h3>\r\n      <p>{props.descripcion}</p>\r\n      <h5>En stock:<span>{stock ? itemStock: 'Agotado'}</span></h5>\r\n      <button\r\n        disabled = {!stock}\r\n        onClick = {() => {\r\n          setItemStock(itemStock-1)\r\n        props.addItem()\r\n        }}>\r\n        {stock ? 'Comprar' : 'No hay mas stock'}\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":"qKACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAQA,SAAR,KAAwB,OAAxB,C,wFACA,cAAe,SAASC,KAAT,CAAcC,KAAd,CAAqB,CAElC,eAAiCF,SAAS,CAACE,KAAK,CAACC,KAAP,CAA1C,0CAAOC,SAAP,gBAAiBC,YAAjB,gBACA,GAAMF,MAAK,CAAGC,SAAS,CAAE,CAAzB,CAEA,mBACE,aAAK,SAAS,CAAC,UAAf,wBACE,oBAAKF,KAAK,CAACI,MAAX,EADF,cAEE,mBAAIJ,KAAK,CAACK,WAAV,EAFF,cAGE,+CAAa,sBAAOJ,KAAK,CAAGC,SAAH,CAAc,SAA1B,EAAb,GAHF,cAIE,eACE,QAAQ,CAAI,CAACD,KADf,CAEE,OAAO,CAAI,kBAAM,CACfE,YAAY,CAACD,SAAS,CAAC,CAAX,CAAZ,CACFF,KAAK,CAACM,OAAN,GACC,CALH,UAMGL,KAAK,CAAG,SAAH,CAAe,kBANvB,EAJF,GADF,CAeD"},"metadata":{},"sourceType":"module"}